/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'io.freefair.lombok' version '5.3.0'
}

group 'com.jelistan.caampr'
version '1.0-SNAPSHOT'

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    // Logging - slf4j over log4j2
    implementation 'org.apache.logging.log4j:log4j-api:2.13.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.13.0'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.13.0'
    runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.2.0'

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.11.969')
    implementation (
        'com.amazonaws:aws-java-sdk-dynamodb',
        'com.amazonaws:aws-java-sdk-lambda')
    // Use JUnit test framework.
    testImplementation (
            'junit:junit:4.13',
            'org.mockito:mockito-inline:3.8.0'
    )

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    //api 'org.apache.commons:commons-math3:3.6.1'

    implementation (
            'com.google.guava:guava:29.0-jre',
            'com.amazonaws:aws-lambda-java-core:1.2.1',
            'com.amazonaws:aws-lambda-java-events:3.7.0',
            'com.googlecode.json-simple:json-simple:1.1.1',
            'com.google.code.gson:gson:2.8.6',
            'com.google.dagger:dagger:2.33',
            'javax.annotation:javax.annotation-api:1.3.2'
    )

    annotationProcessor(
            'com.google.dagger:dagger-compiler:2.33'
    )
}

task buildAWSLambdaZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}
